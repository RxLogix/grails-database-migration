buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:4.0.2"
        classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.2"
    }
}

version project.projectVersion
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"java-library"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.internal.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin: "org.asciidoctor.jvm.convert"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "maven-publish"

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations {
    documentation
}

dependencies {
    api "org.liquibase:liquibase-core:$liquibaseVersion"

    api("org.liquibase.ext:liquibase-hibernate5:$liquibaseHibernateVersion") {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        exclude group: 'org.hibernate', module: 'hibernate-envers'
        exclude group: 'org.liquibase', module: 'liquibase-core'
        exclude group: 'org.liquibase', module: 'liquibase-test-harness'
        exclude group: 'com.h2database', module: 'h2'
    }
    compileOnly "org.hibernate:hibernate-core:5.6.15.Final"

    compileOnly 'org.springframework.boot:spring-boot-starter-logging'
    compileOnly "org.springframework.boot:spring-boot-starter-actuator"
    compileOnly "org.springframework.boot:spring-boot-autoconfigure"
    compileOnly "org.springframework.boot:spring-boot-starter-tomcat"

    compileOnly "org.grails:grails-web-boot"
    compileOnly "org.grails:grails-dependencies"
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    compileOnly "org.grails.plugins:hibernate5"

    testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
    testImplementation "org.hibernate:hibernate-core:5.6.15.Final"
    testImplementation "org.grails.plugins:hibernate5"

    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'


    documentation "org.codehaus.groovy:groovy:$groovyVersion"
    documentation "org.codehaus.groovy:groovy-ant:$groovyVersion"
    documentation "org.codehaus.groovy:groovy-templates:$groovyVersion"

}

grailsPublish {
    userOrg = "grails"
    githubSlug = 'grails-plugins/grails-database-migration'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails Database Migration Plugin"
    desc = "Grails Database Migration Plugin"
    developers = [kazukiyamamoto: "Kazuki YAMAMOTO"]
}

asciidoctor {
    baseDirFollowsSourceFile()
    outputDir = "$buildDir/asciidoc"

    resources {
        from('src/docs/images')
        into "./images"
    }

    attributes 'experimental'  : 'true',
            'compat-mode'   : 'true',
            'toc'           : 'left',
            'icons'         : 'font',
            'version'       : project.version,
            'groupId'       : project.group,
            'artifactId'    : project.name,
            'sourcedir'     : "${projectDir}/src/main/groovy",
            'liquibaseVersion': liquibaseVersion
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Groovydoc) {
    configure {
        docTitle = "Grails Database Migration Plugin ${version}"
        source = project.files('src/main/groovy')
        destinationDir = new File(buildDir, 'docs/api')
        classpath = configurations.documentation
        groovyClasspath = configurations.documentation
    }
}

task docs(type:Copy, group: 'documentation')  {
    dependsOn(groovydoc, asciidoctor)
    from "$buildDir/asciidoc"
    into "$buildDir/docs"
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
    retry {
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
        filter {
            excludeClasses.add("*GroovyChangeLogSpec")
        }
    }
}


gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

generateGitProperties.outputs.upToDateWhen {
    false
} // make sure the generateGitProperties task always executes (even when git.properties is not changed)

jar {
    exclude "testapp/**/**"
    dependsOn generateGitProperties
    manifest {
        attributes("Built-By": System.getProperty("user.name"))
        attributes(["Plugin-Version"        : version,
                    "Plugin-Title"          : project.name,
                    "Plugin-Build-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Git-Commit"            : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
                    "Git-Branch"            : "${-> project.ext.gitProps['git.branch']}"])
    }
    from sourceSets.main.output
    exclude 'git.properties'
}


task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}


publishing {

    publications {
        mavenJar(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact packageJavadoc
        }
    }

    repositories {
        maven {
            name = "NexusRepo"
            credentials {
                username project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
                password project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
            }
            url project.findProperty("nexusUrl") ?: System.getenv("NEXUS_URL")
            allowInsecureProtocol = project.findProperty("isNexusUrlInsecure") ? true : false
        }

    }
}
